#!/bin/bash
set -e

container_image="tinco/discourse-docker-base:0.0.1"
linker="tinco/dynamic-docker-linker:0.0.3"
run_command_generator="tinco/run-command-generator:0.1"


build() {
	docker pull $run_command_generator
	docker pull $linker
	docker pull $container_image
}

run() {
	# read in the configuration
	config=`cat`

	# Enable routing on the host
	sysctl -w net.ipv4.ip_forward=1
	sysctl -w net.ipv4.conf.all.route_localnet=1

	# Run a container that's hosts the network namespace
	nnid=$(docker run -d phusion/passenger-ruby21 sleep infinity)

	do_link "$config" $nnid

	command=$(echo "$config" | docker run -i -a stdin -a stdout $run_command_generator)

	# Attach the container to the network container
	command="$command -t --net=container:$nnid"
	
	# Run the container as intended
	cid=$($command $container_image)

	# Get its IP Address
	address=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' $cid)

	docker stop -t=0 $nnid
	docker rm $nnid

	# Output the container information
	echo "{\"ID\": \"$cid\", \"IPAddress\": \"$address\"}"
}

link() {
	nnid=$1
	config=`cat`
	do_link "$config" $nnid
}

# expects config on first argument, cid on second
do_link() {
	nnid=$2
	config=$1
	echo "$config" | docker run --rm --privileged=true -i -a stdin -a stdout -a stderr --net=container:$nnid $linker
}

stop() {
	echo "Stopping"
	docker stop $1
	echo "Removing"
	docker rm $1
}

usage() {
    echo "This script controls the container in this directory. It can be run with any of the following commands."
    echo ""
    echo "Usage:"
    echo "    control build                       # Prepare the container"
    echo "    control run                         # Run a container, prints id to stdout"
    echo "    control link <id>                   # Link a container, link options are passed in JSON over stdin "
    echo "    control stop <id>                   # Stop a container"                  
}

COMMAND=$1
shift
case $COMMAND in
    "build")
        build $@
        ;;
    "run")
        run $@
        ;;
    "link")
        link $@
        ;;
    "stop")
        stop $@
        ;;
    *)
        usage
        ;;
esac

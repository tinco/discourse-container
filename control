#!/bin/bash

build() {
	docker pull tinco/run-command-generator:0.1
	docker pull tinco/dynamic-docker-linker:0.0.1
	docker pull tinco/discourse-docker-base:0.0.1
}

run() {
	# prepare a network bootstrap docker container for linking
	nnid=$(docker run -d phusion/passenger-ruby21 sleep infinity)

	config=`cat`

	# Set up the links on the network bootstrap container
	echo "$config" | docker run -i -a stdin -a stdout --privileged -v /var/run/docker.sock:/var/run/docker.sock tinco/dynamic-docker-linker $nnid

	command=$(docker run -i -a stdin -a stdout tinco/run-command-generator:0.1)
	# Environment variables we can hard code
	command="$command 
	 -e HOME=/root
	 -e RAILS_ENV=production
	 -e DISCOURSE_DB_SOCKET=
	 -e DISCOURSE_DB_HOST=localhost
	 -e DISCOURSE_DB_PORT=5432
	 -e DISCOURSE_DB_PASSWORD=
	 -e DISCOURSE_REDIS_HOST=localhost
	 --net=container:$nnid
	"
	
	cid=$(echo "$config" | eval "$command tinco/discourse-initializer")
	address=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' $cid)
	echo "{\"ID\": \"$cid\", \"IPAddress\": \"$address\"}"

	# clean up network bootstrap container
	docker stop -t=0 $nnid
	docker rm $nnid
}

link() {
	echo "Nothing to do."
}

stop() {
	echo "Stopping"
	docker stop $1
	echo "Removing"
	docker rm $1
}

usage() {
    echo "This script controls the container in this directory. It can be run with any of the following commands."
    echo ""
    echo "Usage:"
    echo "    control build                       # Prepare the container"
    echo "    control run                         # Run a container, prints id to stdout"
    echo "    control link <id>                   # Link a container, link options are passed in JSON over stdin "
    echo "    control stop <id>                   # Stop a container"                  
}

COMMAND=$1
shift
case $COMMAND in
    "build")
        build $@
        ;;
    "run")
        run $@
        ;;
    "link")
        link $@
        ;;
    "stop")
        stop $@
        ;;
    *)
        usage
        ;;
esac
